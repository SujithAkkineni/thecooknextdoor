{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/admin';\n    this.tokenKey = 'admin_token';\n    this.currentAdminSubject = new BehaviorSubject(null);\n    this.currentAdmin$ = this.currentAdminSubject.asObservable();\n    this.loadStoredAuth();\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      this.setSession(response);\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n    this.currentAdminSubject.next(null);\n  }\n  isLoggedIn() {\n    const token = this.getToken();\n    if (!token) return false;\n    // Check if token is expired\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const expiration = payload.exp * 1000;\n    return Date.now() < expiration;\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  getCurrentAdmin() {\n    return this.currentAdminSubject.value;\n  }\n  setSession(authResult) {\n    localStorage.setItem(this.tokenKey, authResult.token);\n    this.currentAdminSubject.next(authResult.admin);\n  }\n  loadStoredAuth() {\n    const token = this.getToken();\n    if (token && this.isLoggedIn()) {\n      // Decode admin info from token\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      this.currentAdminSubject.next({\n        id: payload.id,\n        username: payload.username,\n        role: payload.role\n      });\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","tokenKey","currentAdminSubject","currentAdmin$","asObservable","loadStoredAuth","login","username","password","post","pipe","response","setSession","logout","localStorage","removeItem","next","isLoggedIn","token","getToken","payload","JSON","parse","atob","split","expiration","exp","Date","now","getItem","getCurrentAdmin","value","authResult","setItem","admin","id","role","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\akkin\\OneDrive\\Desktop\\thecooknextdoor\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\ninterface Admin {\r\n  id: string;\r\n  username: string;\r\n  role: string;\r\n}\r\n\r\ninterface AuthResponse {\r\n  token: string;\r\n  admin: Admin;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:5000/api/admin';\r\n  private tokenKey = 'admin_token';\r\n  private currentAdminSubject = new BehaviorSubject<Admin | null>(null);\r\n  public currentAdmin$ = this.currentAdminSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadStoredAuth();\r\n  }\r\n\r\n  login(username: string, password: string): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, { username, password })\r\n      .pipe(\r\n        tap(response => {\r\n          this.setSession(response);\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n    this.currentAdminSubject.next(null);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    const token = this.getToken();\r\n    if (!token) return false;\r\n\r\n    // Check if token is expired\r\n    const payload = JSON.parse(atob(token.split('.')[1]));\r\n    const expiration = payload.exp * 1000;\r\n    return Date.now() < expiration;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  getCurrentAdmin(): Admin | null {\r\n    return this.currentAdminSubject.value;\r\n  }\r\n\r\n  private setSession(authResult: AuthResponse): void {\r\n    localStorage.setItem(this.tokenKey, authResult.token);\r\n    this.currentAdminSubject.next(authResult.admin);\r\n  }\r\n\r\n  private loadStoredAuth(): void {\r\n    const token = this.getToken();\r\n    if (token && this.isLoggedIn()) {\r\n      // Decode admin info from token\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      this.currentAdminSubject.next({\r\n        id: payload.id,\r\n        username: payload.username,\r\n        role: payload.role\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAgBpC,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALhB,KAAAC,MAAM,GAAG,iCAAiC;IAC1C,KAAAC,QAAQ,GAAG,aAAa;IACxB,KAAAC,mBAAmB,GAAG,IAAIP,eAAe,CAAe,IAAI,CAAC;IAC9D,KAAAQ,aAAa,GAAG,IAAI,CAACD,mBAAmB,CAACE,YAAY,EAAE;IAG5D,IAAI,CAACC,cAAc,EAAE;EACvB;EAEAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAe,GAAG,IAAI,CAACT,MAAM,QAAQ,EAAE;MAAEO,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAChFE,IAAI,CACHd,GAAG,CAACe,QAAQ,IAAG;MACb,IAAI,CAACC,UAAU,CAACD,QAAQ,CAAC;IAC3B,CAAC,CAAC,CACH;EACL;EAEAE,MAAMA,CAAA;IACJC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACd,QAAQ,CAAC;IACtC,IAAI,CAACC,mBAAmB,CAACc,IAAI,CAAC,IAAI,CAAC;EACrC;EAEAC,UAAUA,CAAA;IACR,MAAMC,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;IAC7B,IAAI,CAACD,KAAK,EAAE,OAAO,KAAK;IAExB;IACA,MAAME,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMC,UAAU,GAAGL,OAAO,CAACM,GAAG,GAAG,IAAI;IACrC,OAAOC,IAAI,CAACC,GAAG,EAAE,GAAGH,UAAU;EAChC;EAEAN,QAAQA,CAAA;IACN,OAAOL,YAAY,CAACe,OAAO,CAAC,IAAI,CAAC5B,QAAQ,CAAC;EAC5C;EAEA6B,eAAeA,CAAA;IACb,OAAO,IAAI,CAAC5B,mBAAmB,CAAC6B,KAAK;EACvC;EAEQnB,UAAUA,CAACoB,UAAwB;IACzClB,YAAY,CAACmB,OAAO,CAAC,IAAI,CAAChC,QAAQ,EAAE+B,UAAU,CAACd,KAAK,CAAC;IACrD,IAAI,CAAChB,mBAAmB,CAACc,IAAI,CAACgB,UAAU,CAACE,KAAK,CAAC;EACjD;EAEQ7B,cAAcA,CAAA;IACpB,MAAMa,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;IAC7B,IAAID,KAAK,IAAI,IAAI,CAACD,UAAU,EAAE,EAAE;MAC9B;MACA,MAAMG,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrD,IAAI,CAACtB,mBAAmB,CAACc,IAAI,CAAC;QAC5BmB,EAAE,EAAEf,OAAO,CAACe,EAAE;QACd5B,QAAQ,EAAEa,OAAO,CAACb,QAAQ;QAC1B6B,IAAI,EAAEhB,OAAO,CAACgB;OACf,CAAC;;EAEN;;;uBA1DWvC,WAAW,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX3C,WAAW;MAAA4C,OAAA,EAAX5C,WAAW,CAAA6C,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}