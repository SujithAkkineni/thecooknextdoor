{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AdminOrdersComponent = class AdminOrdersComponent {\n  constructor(adminService, authService, router) {\n    this.adminService = adminService;\n    this.authService = authService;\n    this.router = router;\n    this.orders = [];\n    this.filteredOrders = [];\n    this.loading = true;\n    this.currentAdmin = null;\n    this.statusFilter = 'all';\n    this.searchTerm = '';\n  }\n  ngOnInit() {\n    this.currentAdmin = this.authService.getCurrentAdmin();\n    this.loadOrders();\n  }\n  loadOrders() {\n    this.loading = true;\n    this.adminService.getAllOrders().subscribe({\n      next: data => {\n        this.orders = data;\n        this.applyFilters();\n        this.loading = false;\n      },\n      error: error => {\n        console.error('Error loading orders:', error);\n        this.loading = false;\n      }\n    });\n  }\n  applyFilters() {\n    this.filteredOrders = this.orders.filter(order => {\n      const matchesStatus = this.statusFilter === 'all' || order.paymentStatus === this.statusFilter;\n      const matchesSearch = !this.searchTerm || order.buyerName.toLowerCase().includes(this.searchTerm.toLowerCase()) || order.foodId.name.toLowerCase().includes(this.searchTerm.toLowerCase());\n      return matchesStatus && matchesSearch;\n    });\n  }\n  onStatusFilterChange(status) {\n    this.statusFilter = status;\n    this.applyFilters();\n  }\n  onSearchChange(searchTerm) {\n    this.searchTerm = searchTerm;\n    this.applyFilters();\n  }\n  updateOrderStatus(orderId, newStatus) {\n    this.adminService.updateOrderStatus(orderId, newStatus).subscribe({\n      next: updatedOrder => {\n        // Update the order in the local array\n        const index = this.orders.findIndex(order => order._id === orderId);\n        if (index !== -1) {\n          this.orders[index] = updatedOrder;\n          this.applyFilters();\n        }\n      },\n      error: error => {\n        console.error('Error updating order status:', error);\n        alert('Failed to update order status. Please try again.');\n      }\n    });\n  }\n  getStatusClass(status) {\n    switch (status) {\n      case 'completed':\n        return 'status-completed';\n      case 'pending':\n        return 'status-pending';\n      case 'cancelled':\n        return 'status-cancelled';\n      default:\n        return '';\n    }\n  }\n  formatDate(dateString) {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/admin/login']);\n  }\n  navigateTo(section) {\n    this.router.navigate(['/admin', section]);\n  }\n};\nAdminOrdersComponent = __decorate([Component({\n  selector: 'app-admin-orders',\n  templateUrl: './admin-orders.component.html',\n  styleUrls: ['./admin-orders.component.css']\n})], AdminOrdersComponent);\nexport { AdminOrdersComponent };","map":{"version":3,"names":["Component","AdminOrdersComponent","constructor","adminService","authService","router","orders","filteredOrders","loading","currentAdmin","statusFilter","searchTerm","ngOnInit","getCurrentAdmin","loadOrders","getAllOrders","subscribe","next","data","applyFilters","error","console","filter","order","matchesStatus","paymentStatus","matchesSearch","buyerName","toLowerCase","includes","foodId","name","onStatusFilterChange","status","onSearchChange","updateOrderStatus","orderId","newStatus","updatedOrder","index","findIndex","_id","alert","getStatusClass","formatDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","logout","navigate","navigateTo","section","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\akkin\\OneDrive\\Desktop\\thecooknextdoor\\frontend\\src\\app\\components\\admin\\admin-orders\\admin-orders.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AdminService } from '../../../services/admin.service';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\ninterface Order {\r\n  _id: string;\r\n  foodId: {\r\n    _id: string;\r\n    name: string;\r\n    price: number;\r\n  };\r\n  buyerName: string;\r\n  address: string;\r\n  deliveryOption: string;\r\n  paymentStatus: string;\r\n  createdAt: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-admin-orders',\r\n  templateUrl: './admin-orders.component.html',\r\n  styleUrls: ['./admin-orders.component.css']\r\n})\r\nexport class AdminOrdersComponent implements OnInit {\r\n  orders: Order[] = [];\r\n  filteredOrders: Order[] = [];\r\n  loading = true;\r\n  currentAdmin: any = null;\r\n  statusFilter = 'all';\r\n  searchTerm = '';\r\n\r\n  constructor(\r\n    private adminService: AdminService,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.currentAdmin = this.authService.getCurrentAdmin();\r\n    this.loadOrders();\r\n  }\r\n\r\n  loadOrders() {\r\n    this.loading = true;\r\n    this.adminService.getAllOrders().subscribe({\r\n      next: (data) => {\r\n        this.orders = data;\r\n        this.applyFilters();\r\n        this.loading = false;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading orders:', error);\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  applyFilters() {\r\n    this.filteredOrders = this.orders.filter(order => {\r\n      const matchesStatus = this.statusFilter === 'all' || order.paymentStatus === this.statusFilter;\r\n      const matchesSearch = !this.searchTerm ||\r\n        order.buyerName.toLowerCase().includes(this.searchTerm.toLowerCase()) ||\r\n        order.foodId.name.toLowerCase().includes(this.searchTerm.toLowerCase());\r\n      return matchesStatus && matchesSearch;\r\n    });\r\n  }\r\n\r\n  onStatusFilterChange(status: string) {\r\n    this.statusFilter = status;\r\n    this.applyFilters();\r\n  }\r\n\r\n  onSearchChange(searchTerm: string) {\r\n    this.searchTerm = searchTerm;\r\n    this.applyFilters();\r\n  }\r\n\r\n  updateOrderStatus(orderId: string, newStatus: string) {\r\n    this.adminService.updateOrderStatus(orderId, newStatus).subscribe({\r\n      next: (updatedOrder) => {\r\n        // Update the order in the local array\r\n        const index = this.orders.findIndex(order => order._id === orderId);\r\n        if (index !== -1) {\r\n          this.orders[index] = updatedOrder;\r\n          this.applyFilters();\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error updating order status:', error);\r\n        alert('Failed to update order status. Please try again.');\r\n      }\r\n    });\r\n  }\r\n\r\n  getStatusClass(status: string): string {\r\n    switch (status) {\r\n      case 'completed': return 'status-completed';\r\n      case 'pending': return 'status-pending';\r\n      case 'cancelled': return 'status-cancelled';\r\n      default: return '';\r\n    }\r\n  }\r\n\r\n  formatDate(dateString: string): string {\r\n    return new Date(dateString).toLocaleDateString('en-IN', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n    this.router.navigate(['/admin/login']);\r\n  }\r\n\r\n  navigateTo(section: string) {\r\n    this.router.navigate(['/admin', section]);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}