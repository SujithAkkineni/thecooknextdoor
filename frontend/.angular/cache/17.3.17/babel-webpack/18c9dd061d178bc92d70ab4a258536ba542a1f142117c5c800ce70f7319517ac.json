{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:5000/api/admin';\n      this.tokenKey = 'admin_token';\n      this.currentAdminSubject = new BehaviorSubject(null);\n      this.currentAdmin$ = this.currentAdminSubject.asObservable();\n      this.loadStoredAuth();\n    }\n    login(username, password) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        username,\n        password\n      }).pipe(tap(response => {\n        this.setSession(response);\n      }));\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n      this.currentAdminSubject.next(null);\n    }\n    isLoggedIn() {\n      const token = this.getToken();\n      if (!token) return false;\n      // Check if token is expired\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const expiration = payload.exp * 1000;\n      return Date.now() < expiration;\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    getCurrentAdmin() {\n      return this.currentAdminSubject.value;\n    }\n    setSession(authResult) {\n      localStorage.setItem(this.tokenKey, authResult.token);\n      this.currentAdminSubject.next(authResult.admin);\n    }\n    loadStoredAuth() {\n      const token = this.getToken();\n      if (token && this.isLoggedIn()) {\n        // Decode admin info from token\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        this.currentAdminSubject.next({\n          id: payload.id,\n          username: payload.username,\n          role: payload.role\n        });\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}